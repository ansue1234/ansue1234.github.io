{"componentChunkName":"component---src-components-template-js","path":"/contents/projects/SignalGenerator/","result":{"data":{"mdx":{"frontmatter":{"title":"Signal Generator","toc":false,"category":"projects","tags":["Personal","Hardware"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Signal Generator\",\n  \"category\": \"projects\",\n  \"tags\": [\"Personal\", \"Hardware\"],\n  \"toc\": false,\n  \"priority\": 4,\n  \"description\": \"A DIY sine, square and PWM signal generator.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"description\"\n  }, \"Description\"), mdx(\"p\", null, \"This is a DIY signal generator using op-amps and an Arduino. \"), mdx(\"h2\", {\n    \"id\": \"approach\"\n  }, \"Approach\"), mdx(\"p\", null, \"The signal generator here is consists of three stages. The main oscillation stage, the square wave stage and the PWM stage.\"), mdx(\"p\", null, \"The main oscillation stage is done using a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.electronics-tutorials.ws/oscillator/wien_bridge.html\"\n  }), \"Wien Bridge Oscillator\"), \". An oscillator using resistors capacitors and an Op-Amp. Since this stage already outputs sine wave, there is nothing much more that we need to do for the sinosoudal output.\"), mdx(\"p\", null, \"The square wave is produced by feeding the sinosoudal signal into an Op-amp and adjusting the gain so that the signal rails to the Vcc and Vdd of the Op-amp.\"), mdx(\"p\", null, \"The PWM signal is generated by the Arduino. The Arduino also controls the LCD that acts as the display that shows the frequency and amplitude of the currently outputted signal. \"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Schematic here\")), mdx(\"h2\", {\n    \"id\": \"topic\"\n  }, \"Topic\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Op-amps, analog circuit design, signal processing\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Description"},{"depth":2,"value":"Approach"},{"depth":2,"value":"Topic"}],"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#approach","title":"Approach"},{"url":"#topic","title":"Topic"}]},"fields":{"slug":"/contents/projects/SignalGenerator/"}}},"pageContext":{"slug":"/contents/projects/SignalGenerator/"}},"staticQueryHashes":[]}