{"componentChunkName":"component---src-components-template-js","path":"/contents/projects/QuickTherm/","result":{"data":{"mdx":{"frontmatter":{"title":"Quick Therm","toc":true,"category":"projects","tags":["Personal","Hardware","Software"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Quick Therm\",\n  \"category\": \"projects\",\n  \"tags\": [\"Personal\", \"Hardware\", \"Software\"],\n  \"toc\": true,\n  \"priority\": 1,\n  \"description\": \"A remote health status monitoring system\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"description\"\n  }, \"Description\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Collaborators\"), \": Fred Hua, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"dlzou.github.io\"\n  }), \"Daniel Zou\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Full Info\"), \": \"), mdx(\"p\", null, \"This project is a remote health status monitoring system of which we named \\\"Quick Therm.\\\" The goal is to allow certain personnelles, organizations such as hospitals and senior homes, and entities to easily monitor the health status for a group of people. This project was submitted for State of California COVID-19 Technology Solutions. The project aimed to help protect health workers distance from potiential COVID patients when gathering their health informations. As of now, Quick Therm is able to measure temperature data, with the ability to measure blood oxygen level and heart rate planned for the future.\"), mdx(\"p\", null, \"Here is a video on this project (feat. Fred Hua)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"insert video here\")), mdx(\"h2\", {\n    \"id\": \"approach\"\n  }, \"Approach\"), mdx(\"p\", null, \"Quick therm system consists of 2 main parts. The hardware module, which is used to detect user health status and transmit the data to the user's phone to be processed by the software, a mobile app. \"), mdx(\"p\", null, \"The hardware module is essentially an armband, or a chest strap that the user wear. On the strap there is the actual module. The prototype module is built with ATtiny85 for main computation and control, a temperature sensor or thermistor to detect user temperature, and a bluetooth chip to communicate with the user's phone. \"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"insert picture\")), mdx(\"p\", null, \"Since the project is geared toward organizations, the software interface is organized in hierarchies. there are 3 different roles a user can be. The director, manager and ordinary users(residents). Ordinary users is asked to wear the hardware module so their health status can be monitored by their respective manager. The director then is able to see the status of everyone in the organization, through the ability to see all the managers.\"), mdx(\"p\", null, \"Ordinary users have the ability to measure their own temperature by tapping on a button in the app, or they can allow the app to run in the background constantly monitor their temperature change. If a user's health status is abnormal, then their profile would be color coded base on the severity and can be easily recognized by their higher ups. The app also have a lot of other convenient features such as seeing a history of temperature takings, etc. as seen in the video on top.\"), mdx(\"p\", null, \"The app is written with Dart using Flutter for the frontend and Google Cloud Firestore as the backend.\"), mdx(\"h2\", {\n    \"id\": \"topic\"\n  }, \"Topic\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flutter, mobile app development, Dart, Google cloud Firestore\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Description"},{"depth":2,"value":"Approach"},{"depth":2,"value":"Topic"}],"tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#approach","title":"Approach"},{"url":"#topic","title":"Topic"}]},"fields":{"slug":"/contents/projects/QuickTherm/"}}},"pageContext":{"slug":"/contents/projects/QuickTherm/"}},"staticQueryHashes":[]}